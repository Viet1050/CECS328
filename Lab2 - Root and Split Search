import java.util.*;
public class Tester {
	static Scanner scan = new Scanner(System.in);
	
	public static void main(String[] args) {
		//Ask user to input a number to find the square root
		System.out.print("Enter a number: ");
		int num = scan.nextInt();
		//Call the squareRoot function and pass in the user inputed number
		//Display square root of the number
		System.out.println("Square root of " + num + " is " + squareRoot(num));
		System.out.println(" ");
		
		//Ask the user to enter how many zeros and ones they want in the array
		System.out.print("How many zeros do you want to add: ");
		int zeros = scan.nextInt();
		System.out.print("How many ones do you want to add: ");
		int ones = scan.nextInt();
		
		//Add the amount of zeros and ones to the array based on user input
		int [] array= new int[zeros+ones];
		for(int i = 0; i< array.length;i++) {
			array[i] = 1;
			for(int j = 0;j<zeros; j++) {
				array[j] = 0;
			}
		}
		System.out.println(Arrays.toString(array));
		//Call splitSearch and pass array
		//Set the left value to zero to have it start at index zero of the array
		//Set the right value to the length of the array
		//Display the K value showing where the split occurs
		System.out.println("K = " + splitSearch(array,0,array.length));
	}
	public static int squareRoot(int n) {
		//Base case: If n equals 0 or 1 then the square root would just the number
		if(n == 0 || n == 1) {
			return n;
		}
		//call binarySearch and pass 0 as the low value and the user number as
		//both the high value and the key 
		else if(n > 1){
			return rootSearch(0,n,n);
		}
		return -1;
	}
	
	public static int rootSearch(int low,int high, int key) {
		if(low <= high) {
			//Find the middle value between the low and the high values
			int mid = (low + high)/2;
			
			//check if the key value is the same as the mid value squared
			//If it is, return the mid value
			if((mid*mid) == key) {
				return mid;
			}
			
			//if the key is less than the value of mid^2,then check if key is greater than (mid-1)^2
			//to ensure the value is the ceiling of the square root of the key. If it is not,
			//recursively call the binarySearch function and changes the high value to mid-1
			else if(key < mid*mid) {
				if(key > ((mid-1)*(mid-1))){
					return mid;
				}
				return rootSearch(low,mid-1,key);
			}
			
			//if the key is greater than the value of mid^2, recursively calls the binarySearch function
			//and changes the low value to mid+1
			else{
				return rootSearch(mid+1,high,key);
			}
		}
		return -1;
	}

	public static int splitSearch(int[] a,int left,int right) {
		if(left <= right) {
			//Calculate the middle value in the array
			int mid = (left + right)/2;
			
			//Check if the first value in the array is 1
			//If it is, return zero as the index
			if(mid == 0) {
				if(a[mid] == 1) {
					return 0;
				}
			}
			
			//Check if the value at a[mid] is equal to one
			//If it is, check if the value before index mid in the array is equal to zero
			//Return the index where the split occurs, otherwise recursively call 
			//splitSearch and pass mid-1 as the right value
			if(a[mid] == 1) {
				if(a[mid-1] == 0) {
					return mid;
				}
				else {
					return splitSearch(a,left,mid-1);
				}
			}
			
			//Check if the value at a[mid] is equal to zero
			//If it is, check if the next value in the array is equal to one
			//Return the index where the split occurs, otherwise recursively call 
			//splitSearch and pass mid+1 as the left value
			else if(a[mid] == 0) {
				if(a[mid+1] == 1) {
					return mid+1;
				}
				else {
				return splitSearch(a,mid+1,right);
				}
			}
		}
		//return a value that is not in the array if the key is not found in the array
		return 1001;
	}
}
